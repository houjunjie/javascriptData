{"dependencies":[],"generated":{"js":"\"use strict\";\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * Array \n * @param {*} x \n */\nvar isEvent = function isEvent(x) {\n  // 如果x是2的倍数，就返回true\n  console.log(x);\n  return x % 2 == 0 ? true : false;\n};\n\nvar numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n/**\n * every 对数组的每一项运行给定一个函数，如果该函数每一项都返回true，则返回true\n */\nconsole.log('Array.every:', numbers.every(isEvent)); // false\n\n/**\n * some 对数组的每一项运行给定一个函数，如果该函数有任意一项返回ture， 则返回true\n */\n\nconsole.log('Array.some:', numbers.some(isEvent)); //true\n\n/**\n * forEach 对数组的每一项运行给定一个函数，该方法没有返回值\n */\n\nnumbers.forEach(function (x) {\n  console.log('forEach', x % 2 == 0);\n});\n\n/**\n * map 对数组的每一项运行给定一个函数，返回每次调用函数的结果组成的数组\n */\n\n/**\n * filter 对数组的每一项运行给定一盒函数，返回该函数会返回true的项组成的数组\n */\n\n/**\n * reduce\n */\n\n//  ES6 ES7 数组新增的功能\n\n/**\n * @@iterator 返回一个包含数组键值对的迭代器对象，可以通过同步调用得到数组元素的键值对\n */\nvar iterator = numbers[Symbol.iterator]();\nconsole.log('iterator', iterator.next().value); //1\nconsole.log('iterator', iterator.next().value); //2\nconsole.log('iterator', iterator.next().value); //3\n\n/**\n * copyWithin 复制数组中一系列的元素到同一个数组中指定的起始位置\n */\nvar copyArray = [1, 2, 3, 4, 5, 6];\nconsole.log('copyWithin', copyArray.copyWithin(0, 3));\n\n/**\n * entries 返回包含数组所有键值对的@@iterator\n */\nvar entries = numbers.entries(); // 得到键值对的迭代器\nconsole.log('entries', entries.next().value); //[0, 1] - 位置0的值为1\nconsole.log('entries', entries.next().value); //[1, 2] - 位置0的值为2\nconsole.log('entries', entries.next().value); //[2, 3] - 位置0的值为3\n\n/**\n * includes 如果数组中存在某个元素则返回true，否则返回false es7新增\n */\n\n/**\n * find 根据回调函数给定的条件从数组中查找元素，如果存在则返回该元素\n */\n\n/**\n * findIndex 根据回调函数给定的条件从数组中查找元素，如果存在则返回该元素在改数组中的索引\n */\n\n/**\n * fill 用静态值填充数组\n */\nvar numberFill = Array.of(1, 2, 3, 4, 5, 6);\nconsole.log('fill', numberFill.fill(0)); // [0, 0, 0, 0, 0, 0]\n\n/**\n * from 根据已有的数组创建新的数组\n */\nvar numbers2 = Array.from(numbers);\nconsole.log('from numbers2', numbers2);\nvar evens = Array.from(numbers, function (x) {\n  return x % 2 == 0;\n});\nconsole.log('from evens', numbers3);\n/**\n * keys 返回包含数组所有索引的@@iterator\n */\nvar aKeys = numbers.keys(); //得到数组索引的迭代器\nconsole.log('keys', aKeys.next()); //{value:0, done: false}\nconsole.log('keys', aKeys.next()); //{value:1, done: false}\nconsole.log('keys', aKeys.next()); //{value:2, done: false}\n\n\n/**\n * of 根据传入的参数创建一个新的数组\n */\nvar numbers3 = Array.of(1); // == let number3 = [1]\nvar numbers4 = Array.of(1, 2, 3, 4, 5, 6); // == let number4 = [1, 2, 3, 4, 5, 6]\nvar numbersCopy = Array.of.apply(Array, _toConsumableArray(numbers4)); //用这个方法进行复制\n\n/**\n * values 返回包含数组所有值的@@iterator\n */\n// console.log(numbers.values);\n// let aValues = numbers.values(); //得到数组值的迭代器\n// console.log('values:', aValues.next()); //{value:1, done: false}\n// console.log('values:', aValues.next()); //{value:2, done: false}\n// console.log('values:', aValues.next()); //{value:3, done: false}"},"hash":"6b613084aca0f64b7a562bdd779a897a"}
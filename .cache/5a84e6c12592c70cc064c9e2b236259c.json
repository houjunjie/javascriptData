{"dependencies":[],"generated":{"js":"\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// function Stack() {\n// \tlet items = [];\n// \tthis.push = function (element) { //向栈添加元素\n// \t\titems.push(element);\n// \t}\n\n// \tthis.pop = function () { //从栈移除元素\n// \t\treturn items.pop();;\n// \t}\n\n// \tthis.peek = function () { //查看栈顶元素\n// \t\treturn items[items.length - 1]\n// \t}\n\n// \tthis.isEmpty = function () { //检查栈是否为空\n// \t\treturn items.length == 0\n// \t}\n\n// \tthis.size = function () { //返回栈的长度\n// \t\treturn items.length;\n// \t}\n\n// \tthis.clear = function () { // 清空栈\n// \t\titems = []\n// \t}\n\n// \tthis.print = function () { //打印栈元素\n// \t\tconsole.log(items.toString());\n// \t}\n// }\n\n// let stack = new Stack();\n// console.log(stack.isEmpty());\n\nvar _items = Symbol();\n\nvar Stack = function () {\n  function Stack() {\n    _classCallCheck(this, Stack);\n\n    this[_items] = [];\n    console.log(_items, this[_items]);\n  }\n\n  _createClass(Stack, [{\n    key: \"push\",\n    value: function push(element) {\n      this[_items].push(element);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      this[_items].pop();\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this[_items].length == 0;\n    }\n  }, {\n    key: \"print\",\n    value: function print() {\n      console.log(this[_items].toString());\n    }\n  }]);\n\n  return Stack;\n}();\n\nvar stack = new Stack();\nconsole.log(stack.isEmpty());\nconsole.log(stack.push(1));\nstack.print();\nvar objectSymbols = Object.getOwnPropertySymbols(stack);\nconsole.log(objectSymbols, 1);"},"hash":"23365a89af2d3f9ac5713ed28380751e"}